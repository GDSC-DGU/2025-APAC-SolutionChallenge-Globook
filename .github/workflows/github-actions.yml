name: CI/CD using github actions & docker

on:
  push:
    branches: [ "main" ]
    paths:
      - 'globook_server/**'
      - '.github/**'

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Move to server project
        working-directory: ./globook_server
        run: echo "Moved to globook_server"

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('globook_server/**/*.gradle*', 'globook_server/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: make application.yml
        run: |
          mkdir -p globook_server/src/main/resources
          echo "${{ secrets.YML }}" > globook_server/src/main/resources/application.yml

      - name: Restore GCP credentials from Base64
        run: |
          echo "${{ secrets.GCP_JSON_B64 }}" | base64 -d > globook_server/src/main/resources/solutionchallenge-globook-a47f1971726c.json

      - name: Build with Gradle
        working-directory: globook_server
        run: ./gradlew build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Docker Login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Docker build & push
        working-directory: globook_server
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --push \
            -t ${{ secrets.DOCKER_USERNAME }}/globook:latest .

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: mj
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            cd /home/mj/globook
            docker compose down
            docker compose pull
            docker compose up -d --remove-orphans
            docker image prune -f
